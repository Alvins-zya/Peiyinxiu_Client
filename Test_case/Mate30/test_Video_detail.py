#encoding: utf-8
'''
@author:alvin.zhu
@file:test_video_detail.py
@time:2020/11/6 14:45
@description:

'''
import os,sys
curpath = os.path.abspath(os.path.dirname(__file__))
rootpath = os.path.split(curpath)[0]
sys.path.append(rootpath)
import time
from public.unittest_import import dubbing
class video_detail(dubbing):
    def test_a(self):
        # self.v.into_video()
        # self.v.head_into_zoom_back()
        # self.v.video_follow()
        # self.v.video_good()
        # self.v.video_exposure_touch()
        # self.v.video_exposure_gold()
        # self.v.video_exposure_freevip()
        # self.v.video_exposure_diamond()
        # self.v.video_comments()
        # self.v.video_comment_send()
        # self.v.video_comment_report()
        # self.v.video_comments_load()
        # self.v.video_coor_dubbing()
        # self.v.video_source()
        self.v.video_share()
        self.v.video_switch()
        self.v.video_hot_work()
        self.v.btnback()

class person_center(dubbing):
    def test_a(self):
        self.p.person_my()
        self.p.person_into_my_zoom()
        self.v.btnback()
        self.p.person_home_into_follow()
        self.p.person_home_into_fans()
        self.p.person_copy_id()
        self.p.person_into_my_zoom()
        self.p.person_zoom_works_search()
        self.p.person_zoom_source_search()
        self.p.person_zoom_edit_info()
        self.p.person_zoom_change_gender()
        self.p.person_zoom_change_head()
        self.p.person_zoom_introduction()
        self.p.person_zoom_change_area()
        self.p.person_zoom_change_birthday()
        self.p.person_zoom_username_check()
        self.p.person_zoom_vip_headwear()
        self.p.person_zoom_vip_dress()
        self.p.person_zoom_user_level()
        self.p.person_zoom_authentication()
        self.p.person_zoom_fans()
        self.v.btnback()
        self.p.person_zoom_follows()
        self.v.btnback()
        self.p.person_zoom_societies()
        self.v.btnback()
        self.p.person_zoom_crunchies_list()
        self.p.person_zoom_work_list()

        self.p.person_zoom_work_switch_label()
        self.p.person_zoom_work_top()
        self.p.person_zoom_work_delete()
        self.p.person_zoom_coors()
        self.p.person_zoom_coor_invite()
        self.p.person_zoom_coor_private_public()
        self.p.person_zoom_coor_delete()
        self.p.person_zoom_source_preview()
        self.p.person_zoom_source_dubbing()
        self.p.person_zoom_goods_record()
        self.v.btnback()
        self.p.person_zoom_forward()

        self.p.person_zoom_post_list()
        self.p.person_zoom_forword_and_delete()
        self.p.person_chat_list()
        self.p.person_zoom_create_compilation()
        self.p.person_zoom_delete_compilation()
        self.p.person_zoom_quit()
        self.p.person_vip_enter()
        self.p.person_vip_equity()
        self.p.person_vip_price()
        self.p.person_vip_give()

        self.p.person_vip_privileges()
        self.p.person_cp_invite()
        self.p.person_cp_zoom()
        self.p.person_daren()
        self.p.person_system_notices()
        self.p.person_good_notices()
        self.p.person_coor_notices()
        self.p.person_coor_dubbing()
        self.p.person_coor_delete()
        self.p.person_coor_generate_works()
        self.p.person_coor_video_play()
        self.p.person_coor_notice_setting()
        self.p.person_comment_notices()
        self.p.person_comment_follows()
        self.p.person_comment_video_detail()
        self.p.person_comment_reply()
        self.p.person_comment_post_notices()
        self.p.person_chat_notices()
        self.p.person_chat_user_list()
        self.p.person_user_chat()
        self.p.person_chat_report()
        self.p.person_chat_user_zoom()
        self.p.person_chat_list_delete()
        self.p.person_chat_not_follow()
        self.p.person_vip_draft_synchronous()
        self.p.person_draft_reload()


        self.p.person_draft_video_preview()
        self.p.person_draft_repeat()
        self.p.person_draft_reassignment()
        self.p.person_already_source_list()
        self.p.person_already_source_dubbing()
        self.p.person_alread_source_delete()
        self.p.person_alread_source_delete_network()
        self.p.person_alread_source_bulk_deletion()
        self.p.person_source_collection()
        self.p.person_source_collection_refresh()
        self.p.person_already_source_dubbing()
        self.p.person_alread_source_delete()
        self.v.btnback()
        self.p.person_self_control_source()
        self.p.person_self_control_video_select()
        self.p.person_self_control_video_clip()
        self.p.person_self_control_source_delete()
        self.v.btnback()
        self.p.person_my_wealth()
        self.p.person_my_earnings()
        self.p.person_my_achievements()
        self.p.person_invite_friend()
        self.p.person_my_wealth()
        self.v.btnback()
        self.p.person_my_earnings()
        self.p.person_my_achievements()
        self.p.person_invite_friend()
        self.v.btnback()
        self.p.person_points_mall()
        self.p.person_mode_switch()

class home_page(dubbing):
    def test_a(self):
        self.h.tips()
        self.h.task_list()
        self.h.task_daily_attendance()
        self.h.task_daily_tasks()
        self.v.btnback()
        self.h.home_search()
        self.h.source_search()
        self.h.work_search()
        self.h.user_search()
        self.h.user_recommend()
        self.v.btnback()
        self.h.touch_into_video()
        self.h.work_list_load()

class home_multifunction(dubbing):
    def test_a(self):
        self.home_enter.function_channel()
        self.home_enter.function_channel_tvs()
        self.home_enter.function_channel_hot()
        self.v.btnback()
        self.home_enter.function_channel_nearby()
        self.home_enter.function_channel_nearby_work_list()
        self.home_enter.function_channel_nearby_work_detail()
        self.v.btnback()
        self.home_enter.function_exposure()
        self.home_enter.function_exposure_comment()
        self.v.btnback()
        self.home_enter.function_rank()
        self.home_enter.function_rank_good_rank()
        self.home_enter.function_rank_good_rank_sort()
        self.home_enter.function_rank_good_rank_userinfo()
        self.home_enter.function_rank_good_rank_table()
        self.v.btnback()
        self.home_enter.function_rank_anchor()
        self.home_enter.function_rank_anchor_sort()
        self.home_enter.function_rank_good_rank_userinfo()
        self.v.btnback()
        self.home_enter.function_rank_societies()
        self.home_enter.function_rank_societies_sort()
        self.home_enter.function_rank_good_rank_userinfo()
        self.v.btnback()
        self.home_enter.function_rank_sources()
        self.home_enter.function_rank_sources_sort()
        self.v.btnback()
        self.home_enter.function_rank_works_title_check()
        self.home_enter.function_rank_hot_label()
        self.home_enter.function_rank_hot_label_change()
        self.home_enter.function_rank_potential_list()
        self.home_enter.function_rank_works_list_load()
        self.v.btnback()
        self.home_enter.function_pia()
        self.home_enter.function_pia_medal_list()
        self.v.btnback()
        self.home_enter.function_pia_prop_mall()
        self.home_enter.function_pia_prop_mall_lucky_box()
        self.v.btnback()
        self.home_enter.function_pia_prop_mall_dress_up()
        self.v.btnback()
        self.home_enter.function_pia_create_room()
        self.home_enter.function_pia_room_comment()
        self.home_enter.function_pia_room_userhead()
        self.home_enter.function_pia_room_private()
        self.home_enter.function_pia_room_invite_friend()
        self.home_enter.function_pia_room_script_list()
        self.home_enter.function_pia_room_exit()
        self.home_enter.function_pia_match_online()
        self.home_enter.function_pia_follow()
        self.home_enter.function_pia_draft()
        self.v.btnback()
        self.v.btnback()#退出pia戏
        self.home_enter.function_cartoon()
        self.home_enter.function_cartoon_title_check()
        self.v.btnback()
        self.home_enter.function_cartoon_list_load()
        self.home_enter.function_cartoon_episodes_detail()
        self.home_enter.function_cartoon_collection()
        self.home_enter.function_cartoon_make_society()
        self.home_enter.function_cartoon_episode_check()
        self.v.btnback()
        self.v.btnback()
        self.home_enter.function_cartoon_update_check()
        self.v.btnback()
        self.home_enter.function_cartoon_classification_list()
        self.home_enter.function_cartoon_make()
        self.home_enter.function_cartoon_detail()
        self.home_enter.function_cartoon_making()
        self.v.btnback()
        self.home_enter.function_cartoon_my()
        self.home_enter.function_cartoon_change_voiceover()
        self.home_enter.function_cartoon_making_insert_sound()
        self.home_enter.function_cartoon_record()
        self.home_enter.function_cartoon_making_listening_test()
        self.home_enter.function_cartoon_making_background_music()
        self.home_enter.function_cartoon_making_save()
        self.home_enter.function_cartoon_making_upload()
        self.home_enter.function_cartoon_delete()
        self.v.btnback()
        self.v.btnback()

class dubbing_function(dubbing):
    def test_a(self):
        self.d.material_library_dubble()
        self.d.into_dubbing_double()
        self.d.dub_exit_dubbing()
        self.d.into_dubbing_double()
        self.d.dub_exchange_roles()
        self.d.dub_background_sound()
        self.d.dub_start_camera()
        self.d.dub_close_camera()
        self.d.dub_earreturn()
        self.d.dub_script_list_swip()
        self.d.dub_script_change()
        self.d.dub_script_edit()
        self.d.dub_script_edit_nosave()
        self.d.dub_script_default()
        self.d.dub_script_clearall()
        self.d.dub_script_special_char()
        self.d.dub_script_char_lenth()
        self.d.dub_video_play()
        # self.d.dub_video_pause()
        self.d.dub_video_background()
        self.d.dub_record_permissions()
        # self.d.dub_video_play_time()
        self.d.dub_manual_into_preview()
        # self.d.dub_video_play_time()
        self.d.dub_video_review()
        # self.d.dub_review_into_preview()
        self.d.dub_video_review_quit()
        self.d.dub_video_withdraw()
        self.d.dub_record_pause()
        self.d.preview_back_dubbing()
        self.d.dub_audio_track_move()
        self.d.dub_restart_record_dubbing()
        self.d.dub_long_withdraw()
        self.d.dub_into_preview()
        self.d.preview_video_play()
        self.d.preview_subtitle_onoff()
        self.d.preview_voice_volume()
        self.d.preview_voice_calibration()
        self.d.preview_voice_changer()
        self.d.preview_reverberation()
        self.d.preview_background_music()
        self.d.preview_close_background_music()
        self.d.preview_change_music()
        self.d.preview_background_reverberation()
        self.d.preview_load_music_list()
        self.d.preview_download_music()
        self.d.preview_select_music()
        self.d.preview_into_upload()
        self.d.upload_work_cover_screenshots()
        self.d.dubbing_work_cover_photo()
        self.d.dubbing_work_cover_album()
        self.d.upload_title()
        self.d.upload_title_clear()
        self.d.upload_channel_select()
        self.d.upload_privacy()
        self.d.dubbing_coor_switch()
        self.d.upload()
        self.d.upload_video_detail()

class home_follow(dubbing):
    def test_a(self):
        self.f.follow_jump()
        self.f.follow_chat_list()
        self.f.follow_person_zoom()
        self.v.btnback()
        self.f.follow_up_refresh()
        self.f.follow_switch_classification()

class community_circle(dubbing):
    def test_a(self):
        self.c.circle_into()
        self.c.circle_post_history()
        self.c.circle_post_detail()
        self.c.circle_post_history_delete()
        self.c.circle_history_clear()
        self.c.circle_post_forward()
        self.c.circle_tag()
        self.c.circle_comment_detail()
        self.c.circle_content()
        self.c.circle_good()
        self.c.circle_refresh()
        self.c.circle_search()
        self.c.circle_hot_tv_jump()
        self.c.circle_topic_subscribes()
        self.c.circle_topic_search()
        self.c.circle_home_word_topic()
        self.c.circle_word_topic_content()
        self.c.circle_word_topic_add_image()
        self.c.circle_word_topic_select_image()
        self.c.circle_word_topic_add_image()
        self.c.circle_word_topic_photo()
        self.c.circle_word_topic_insert_topic()
        self.c.circle_word_topic_at()
        self.c.circle_word_topic_release()
        self.c.circle_word_topic_delete()
        self.c.circle_home_voice_topic()
        self.c.circle_word_topic_content()
        self.c.circle_voice_topic_record()
        self.c.circle_voice_topic_next()
        self.c.circle_word_topic_insert_topic()
        self.c.circle_word_topic_at()
        self.c.circle_word_topic_release()
        self.c.circle_word_topic_delete()
        self.c.circle_home_listen_topic()
        self.c.circle_word_topic_content()
        self.c.circle_listen_insert_work()
        self.c.circle_word_topic_insert_topic()
        self.c.circle_word_topic_at()
        self.c.circle_word_topic_release()
        self.c.circle_word_topic_delete()

class community_society(dubbing):
    def test_a(self):
        self.s.society_home()
        self.s.society_my_society()
        self.s.society_group_chat()
        self.s.society_activity_day()
        self.s.society_activity_week()
        self.s.society_rank()
        self.s.society_space()
        self.s.society_manager()
        self.s.society_edit_info()
        self.s.society_members()
        self.s.society_announcement()
        self.s.society_work_manager()
        self.s.society_create_collection()
        self.s.society_edit_collection()
        self.s.society_v()
        self.s.society_entry_conditions()
        self.s.society_wealth()
        self.s.society_works_download()
        self.s.society_transfer_dissolved()
        self.s.society_quit_manager()
        self.s.society_recommend()







